<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.korit.springboot_study.mapper.PostMapper">
    <resultMap id="postResultMap" type="com.korit.springboot_study.entity.Post">
        <id property="postId" column="post_id" />
        <result property="userId" column="pt_user_id" />
        <result property="title" column="title" />
        <result property="content" column="content" />
        <result property="createdAt" column="created_at" />
        <result property="updatedAt" column="updated_at" />
        <result property="likeCount" column="like_count" />
        <association property="user" resultMap="userResultMap" />
    </resultMap>

    <resultMap id="userResultMap" type="com.korit.springboot_study.entity.User">
        <id property="userId" column="ut_user_id" />
        <result property="username" column="username" />
    </resultMap>

    <insert id="insert" keyProperty="postId" useGeneratedKeys="true">
        insert into post_tb
        values(default, #{userId}, #{title}, #{content}, now(), now())
    </insert>

    <!-- resultMap 을 안쓰는 경우, 아래와 같이 as 로 변수명을 각각 매칭시켜줘야함 -->
<!--    <select id="selectById" resultType="com.korit.springboot_study.entity.Post">-->
<!--        select-->
<!--            post_id as postId,-->
<!--            user_id as userId,-->
<!--            title,-->
<!--            content,-->
<!--            created_at as createdAt,-->
<!--            updated_at as updatedAt-->
<!--        from-->
<!--            post_tb-->
<!--        where-->
<!--            post_id = #{postId}-->
<!--    </select>-->
    <select id="selectById" resultMap="postResultMap">
        <!-- with : 임시 테이블, 해당 sql 문이 실행될 때 한 번 생성되는 테이블. -->
        with cte_post_like_count_tb as (
            select
                post_id,
                count(post_id) as like_count
            from
                post_like_tb
            group by
                post_id
        )
        select
            pt.post_id,

            pt.user_id as pt_user_id,
            ut.user_id as ut_user_id,
            ut.username,

            pt.title,
            pt.content,
            pt.created_at,
            pt.updated_at,

            ifnull(cplct.like_count, 0) as like_count
        from
            post_tb pt
            inner join user_tb ut on(ut.user_id = pt.user_id)
            <!-- null 값 포함하면 안되는 경우, outer join 이 아닌 inner join 을 사용 -->
            left outer join cte_post_like_count_tb cplct on(cplct.post_id = pt.post_id)
        where
            pt.post_id = #{postId}
    </select>

    <select id="selectAllByKeywordContaining" resultMap="postResultMap">
        with cte_post_like_count_tb as (
            select
                post_id,
                count(post_id) as like_count
            from
                post_like_tb
            group by
                post_id
        )
        select
            pt.post_id,

            pt.user_id as pt_user_id,
            ut.user_id as ut_user_id,
            ut.username,

            pt.title,
            pt.content,
            pt.created_at,
            pt.updated_at,

            ifnull(cplct.like_count, 0) as like_count
        from
            post_tb pt
            inner join user_tb ut on(ut.user_id = pt.user_id)
            left outer join cte_post_like_count_tb cplct on(cplct.post_id = pt.post_id)
        where
            title like concat("%", #{keyword}, "%")
            or content like concat("%", #{keyword}, "%")
        order by
            post_id desc
        limit #{startIndex}, #{limitCount}
    </select>
</mapper>